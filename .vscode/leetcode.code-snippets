{
	// Place your Leetcode-Learning workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"TreeTest": {
		"scope": "cpp",
		"prefix": "treesetup",
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"\n\nusing namespace std;",
			"// Definition for a binary tree node.",
			"struct TreeNode",
			"{",
			"\tint val;",
			"\tTreeNode *left;",
			"\tTreeNode *right;",
			"\tTreeNode() : val(0), left(nullptr), right(nullptr) {}",
			"\tTreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
			"\tTreeNode(int x, TreeNode *left, TreeNode *right)",
			"\t\t: val(x), left(left), right(right) {}",
			"};",

			"class Solution",
			"{",
			"public:",
			"\t${1:funcName}",
			"};",

			"int main(int argc, char const *argv[])",
			"{",
			"\tTreeNode node = TreeNode(1);",
			"\tnode.left = new TreeNode(2);",
			"\tnode.right = new TreeNode(3);",
			"\tnode.left->left = new TreeNode(4);",
			"\tnode.left->right = new TreeNode(5);",
			"\tnode.right->left = new TreeNode(6);",
			"\tnode.right->right = new TreeNode(7);",
			"\t/*",
			"\t\t\t\t1",
			"\t\t2\t\t\t\t3",
			"\t4       5       6       7",
			"\t*/",
			"\tSolution s = Solution();",
			"\tvector<int> vec = s.${2:funcName}(&node);",
			"\tfor (auto &&n : vec)",
			"\t{",
			"\t\tcout << n;",
			"\t}",
			"\treturn 0;",
			"}",

		],
		"description": "test case for tree problem.",
	},

	"LinkedListTest": {
		"scope": "cpp",
		"prefix": "llsetup",
		"body": [
			"#include <iostream>",
			"\n\nusing namespace std;",
			"class Solution {",
			"public:",
			"\tstruct ListNode {",
			"\t\tint val;",
			"\t\tListNode *next;",
			"\t\tListNode() : val(0), next(nullptr) {}",
			"\t\tListNode(int x) : val(x), next(nullptr) {}",
			"\t\tListNode(int x, ListNode *next) : val(x), next(next) {}",
			"\t};",	
			"\t${1:funcName}",
			"};"
		],
		"description": "setup for linked list problem.",
	},
}