{
	// Place your Leetcode-Learning workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"TreeTest": {
		"scope": "cpp",
		"prefix": "treetest",
		"body": [
			"#include <iostream>",


			"using namespace std;",
			"// Definition for a binary tree node.",
			"struct TreeNode",
			"{",
			"   int val;",
			"   TreeNode *left;",
			"   TreeNode *right;",
			"   TreeNode() : val(0), left(nullptr), right(nullptr) {}",
			"   TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}",
			"   TreeNode(int x, TreeNode *left, TreeNode *right)",
			"        : val(x), left(left), right(right) {}",
			"};",

			"class Solution",
			"{",
			"public:",
				
			"};",

			"int main(int argc, char const *argv[])",
			"{",
			"   TreeNode node = TreeNode(1);",
			"   node.left = new TreeNode(2);",
			"   node.right = new TreeNode(3);",
			"   node.left->left = new TreeNode(4);",
			"   node.left->right = new TreeNode(5);",
			"   node.right->left = new TreeNode(6);",
			"   node.right->right = new TreeNode(7);",
			"   /*",
			"              1",
			"      2               3",
			"   4       5       6       7",
			"   */",
			"   Solution s = Solution();",
			"   vector<int> vec = s.funcName(&node);",
			"   for (auto &&n : vec)",
			"   {",
			"      cout << n;",
			"   }",

			"   return 0;",
			"}",

		],
		"description": "Log output to console"
	}
}